//Installation- Download, enter folder in program files, enter all folders till you get to bin. open command prompt in bin.
  >mongod.exe --dbpath data (if you don't specify a path you have to create a folder called data in the bin folder. and use --dbpath data                              to get functioning otherwise you can just use mongod.exe

//You will need to start the server with mongod.exe everytime to start the server
//The go back in to the bin folder and open another command prompt- This time just type
  > mongo
  
  Create a Database- in command prompt
    >use "database name here" //declare what database you want to use
    >db // lists the databases
    >db."table name".insert
    >db.places.insert({"continent": "Africa, "country": "Morocco", "major cities": ["Casablana", "Fez", "Marrakech"]})                
    >WriteResults({nInserted" : 1 })  //will write itself when you hit enter
    >db.places.find()
    >db.places.find({"country":"United States"}).pretty()

Getting Started tutorial - https://docs.mongodb.com/getting-started/shell/tutorial/install-mongodb-on-windows/

Import data in to a collection-
  >mongoimport --db test --collection restaurants --drop --file ~/downloads/primer-dataset.json
  
  Greater Than Operator ($gt)
  Less Than Operator ($lt)
  >db.restaurants.find( { "grades.score": { $lt: 10 } } )
  
 Logical AND
You can specify a logical conjunction (AND) for a list of query conditions by separating the conditions with a comma in the conditions document.
  >db.restaurants.find( { "cuisine": "Italian", "address.zipcode": "10075" } )
  
 Logical OR
You can specify a logical disjunction (OR) for a list of query conditions by using the $or query operator.
  >db.restaurants.find(
   { $or: [ { "cuisine": "Italian" }, { "address.zipcode": "10075" } ] }

Sort Query Results
To specify an order for the result set, append the sort() method to the query. Pass to sort() method a document which contains the field(s) to sort by and the corresponding sort type, e.g. 1 for ascending and -1 for descending.
  >db.restaurants.find().sort( { "borough": 1, "address.zipcode": 1 } )
  
Update Results:
  >db.classroom.update({"row":"2"},{$set: {"row" : 2 }})
  >db.classroom.update({"row":"2"},{$set: {"row" : 2 }}, {multi:true}) //multi: true updates all instances of an object
  //get id if you only want to change one instance  
  /you can $set anytime to add an additional row (MongoDB just creates things if they don't exist)
  >db.classroom.update({"Name":"Rick"}, {$push: {"Name": "Morty"}}) //replace or update data
  >db.classroom.update({"Name":"Steph"}, {$push : {"Hobbies" : "Dancing"}})
  >db.classroom.update({"name":"Steph"}), {$set : {"OS" : "Mac"}})
  >db.classroom.remove({"name":"Steph"})
  >db.classroom.update({}, $set : {"gavecandy":false}, {multi:true})
  
Delete"  
  >db.classroom.remove({"Name":"Rick"}) //remove just data 
  >db.classroom.remove({}) //remove whole row or table
  
  Sorting: //use 1 for acsending and -1 of decending
  db.animals.find().sort({_id:1}) //or
  { age : -1, posts: 1 }
  
  Using Mongo in with the DOM-
  >app.get("/", function(req, res) { res.send("Hello world") });
  
  //empty brackets indicate select all
    >app.get("/", function (req, res) {
    db.animals.find({}, function (err, found) {
    if (err) { console.log(err)} else {res.json(found); } }),; });
    
    //use the /name to indicate what you want to find
      >app.get("/name", function(req, res) {
        db.animals.find().sort({name : 1}, function (err, found) } else {res.json(found); } }); });
   
   
        

React has the concept of a virtual dom, serves as an intermediary dom server to minimize to amount of changes pushed to the browser for performance. 
React does not support Ajax. 
Common.js is a module loader. 

All code inserted in react should be populated in to your root containder (example) <div class = "root">
Webpack- gives all files a name of bundle.js (combines all files in to one file);

You can only have one single node per component for react files (example, one file for a nav bar, one for jumbotron)

### Create your React Element
Const title = React.createElement (
'H1' //tag to be created
{Id:'title', className: 'header'}, // add attributes
)

### Render to the DOM
ReactDOM.render(
  title, 
  document.getElementById ("react-container")
  )
 
//you can also remove render and create element by declaring them globally.
Const {createElement} = React
Const {render} = ReactDOM

### add a css style
Const style = {
  Color: "white",
  FontFamily:"arial"
  }
  
  Const title = createElement (
    "Hi"
    {Id:"title", className: "header", style:style},
    )

### JSX 
JSX helps simplif it down further (native / built in)
render (
 <h1 id = 'title'
  className = 'header'
  style = {style}>
  Hello world
  </h1>
  document.getElementById('react-container)
  )

### Babel note:
 //in your index.html file. Include <script type="text/babel" src="index.js"></script> for the transpillar to run.
 
 *check out httpster it's an npm package that sets up a mini server.
 
 ### Bundling:
 Change script tag to java script and src to bundle.js
 Create a package.json in npm
 Install babel, react
 Manipulate folder structure
 Dist- index.html, bundle.js //everything for the browser
 Src- index.js //everything for react
 
 Create babel.rc file //this is for all the presets that will be translated through babel
   {
   'presets' : [ 'latest', 'react', 'stage-0']
   }
   
   Then install with npm install: 
     Npm install babel-presets-react@(current version here) --save-dev
     Same for latest and stage zero.
     
     After npm install save the files to the bundle.js
     Babel ./src/index.js --out file .dist/bundle.js
  
  Optional: you can go in to the package json file and add "start": "httpster -d .dist -p 3000 // to auto start server if you use httpster
  
  A key is a JSX attribute. The attribute's name is key. The attribute's value should be something unique, similar to an id attribute.

keys don't do anything that you can see! React uses them internally to keep track of lists. If you don't use keys when you're supposed to, React might accidentally scramble your list-items into the wrong order.

Not all lists need to have keys. A list needs keys if either of the following are true:

The list-items have memory from one render to the next. For instance, when a to-do list renders, each item must "remember" whether it was checked off. The items shouldn't get amnesia when they render.
A list's order might be shuffled. For instance, a list of search results might be shuffled from one render to the next.
If neither of these conditions are true, then you don't have to worry about keys. If you aren't sure then it never hurts to use them!
 
A component's props is an object. It holds information about that component.

You can pass information to a React component. How? By giving that component an attribute

If you want to pass information that isn't a string, then wrap that information in curly braces. Here's how you would pass an array:
<Greeting myInfo={["top", "secret", "lol"]} />

props is the name of the object that stores passed-in information. this.props refers to that storage object. At the same time, each piece of passed-in information is called a prop. This means that props could refer to two pieces of passed-in information, or it could refer to the object that stores those pieces of information 

You define an event handler as a method on the component class, just like the render method. Almost all functions that you define in React will be defined in this way, as methods in a class.

Both naming choices occur in the parent component class - that is, in the component class that defines the event handler and passes it.

The first name that you have to choose is the name of the event handler itself.

Look at Talker.js, lines 6 through 12. This is our event handler. We chose to name it talk.

The second name that you have to choose is the name of the prop that you will use to pass the event handler. This is the same thing as your attribute name.

For our prop name, we also chose talk, as shown on line 15:

return <Button talk={this.talk} />;
These two names can be whatever you want. 

Your prop name should be the word on, plus your event type. If you are listening for a "click" event, then you name your prop onClick. If you are listening for a "keyPress" event, then you name your prop onKeyPress:

class MyClass extends React.Component {
  handleHover() {
    alert('I am an event handler.');
    alert('I will listen for a "hover" event.');
  }

  render() {
    return <Child onHover={this.handleHover} />;
  }
}

Every component's props object has a property named children.
this.props.children will return everything in between a component's opening and closing JSX tags.

If a component has more than one child between its JSX tags, then this.props.children will return those children in an array. However, if a component has only one child, then this.props.children will return the single child, not wrapped in an array.

The defaultProps property should be equal to an object:

class Example extends React.Component {
  render() {
    return <h1>{this.props.text}</h1>;
  }
}

// Set defaultProps equal to an object:
Example.defaultProps = {};
